Herencia:

Palabra reservada "extends" para indicar la clase de la cual se hereda.

-Los metodos de la clase de la cual se hereda pueden ser utilizados por la clase que hereda. Palabra reservada "protected (#)"
-Se debe llamar al super constructor cuando se llame al constructor de la clase que heredó. (Metodo "super(param1, param2, ..., paramn);")
-Palabra reservada @override para metodos heredados

* Herencia simple: Una clase solo puede heredar de otra, y no de más.

Simbolo de relacion <|_________ (Linea continua)

Clase abstract:

Palabra reservada "abstract"(Para la clase y sus metodos). Clase de la cual se heredan otras, y que obliga a que estas sobreescriban sus metodos. Es por decirlo asi, 
una "clase muy general"

******Los métodos abstract no llevan cuerpo (no llevan los caracteres {}). ******
- Si al menos un método de la clase es abstract, esto obliga a que la clase completa sea definida abstract, 
sin embargo la clase puede tener el resto de métodos no abstractos.
- Al heredar hace que las clases derivadas DEBAN implementar los metodos abstractos
- No se puede instanciar



Interface:

Palabra reservada "interface". Cuando uno quiere obligar a una clase a tener determinados metodos.

Clase la cual todos sus metodos son abstractos, y no tiene instanciacion. Establece una relacion de "contrato" con otras clases.

-No tiene variables, solo constantes
-Una clase normal puede "implementar" una interface con la palabra "implements". Se pueden "implementar" varias interfaces

Relacion de realizacion:

Es como un "contrato", esta relacion es aplicada para las interfaces

<|--------

-->Existen varias diferencias entre una clase abstracta y una interfaz:

- Una clase abstracta puede heredar o extender cualquier clase (independientemente de que esta sea abstracta o no), 
mientras que una interfaz solamente puede extender o implementar otras interfaces.
- Una clase abstracta puede heredar de una sola clase (abstracta o no) mientras que una interfaz puede extender varias 
interfaces de una misma vez.
- Una clase abstracta puede tener métodos que sean abstractos o que no lo sean, mientras que las interfaces sólo y 
exclusivamente pueden definir métodos abstractos.
- En java concretamente (ya que has puesto la etiqueta Java), en las clases abstractas la palabra abstract es 
obligatoria para definir un método abstracto (así como la clase). Cuando defines una interfaz, esta palabra es opcional ya que se infiere en el concepto de interfaz.
- En una clase abstracta, los métodos abstractos pueden ser public o protected. En una interfaz solamente 
puede haber métodos públicos.
- En una clase abstracta pueden existir variables static, final o static final con cualquier modificador de acceso 
(public, private, protected o default). En una interfaz sólo puedes tener constantes (public static final).